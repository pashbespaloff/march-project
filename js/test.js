/** –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç
	–û–Ω –≤—ã–≥–ª—è–¥–∏—Ç –∫–∞–∫ –æ–¥–∏–Ω –±–ª–æ–∫ —Å –≤–æ–ø—Ä–æ—Å–æ–º –∏ —Ç—Ä–µ–º—è –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞

	–≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω—ã —á–µ—Ä–µ–∑ —Ä–∞–¥–∏–æ-–∫–Ω–æ–ø–∫—É (–≤—ã–±—Ä–∞—Ç—å –º–æ–∂–Ω–æ —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω)
	radioButton.checked –º–æ–∂–µ—Ç –±—ã—Ç—å true –∏–ª–∏ false

	–ü–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –¥–æ—Å—Ç—É–ø–Ω–∞ –∫–Ω–æ–ø–∫–∞ "–ø—Ä–æ–≤–µ—Ä–∏—Ç—å" (–¥–æ —ç—Ç–æ–≥–æ –æ–Ω–∞ disabled)

	–ü–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É –≤—ã —Å–∫—Ä—ã–≤–∞–µ—Ç–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç–µ —Å–ª–µ–¥—É—é—â–∏–π.

	–í –∫–æ–Ω—Ü–µ –ø–æ—Å–ª–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞ –≤—ã –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ–±—â–∏—Ç 
	–Ω–∞ —Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ.

	–≠—Ç–æ –æ–∑–Ω–∞–µ—Ç, —á—Ç–æ –≤—ã –¥–æ–ª–∂–Ω—ã —Å–æ–±–∏—Ä–∞—Ç—å –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –Ω–∞–ø—Ä–∏–º–µ—Ä –≤ –º–∞—Å—Å–∏–≤, –∏ –∑–∞—Ç–µ–º
	—Å—Ä–∞–≤–Ω–∏—Ç—å –µ–≥–æ —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç–≤–µ—Ç–∞–º–∏ –∏ –ø–æ–∫–∞–∑–∞—Ç—å —Å–∫–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ, —Å–∫–æ–ª—å–∫–æ –Ω–µ—Ç.

	JavaScript —ç—Ç–æ Java?
		–ù–µ—Ç.
		–î–∞.
		–í–æ–∑–º–æ–∂–Ω–æ.

	–ø—Ä–æ–≤–µ—Ä–∏—Ç—å

	–°–∫–æ–ª—å–∫–æ –ø–∞—Ä–∞–º–µ–Ω—Ç—Ä–æ–≤ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ —Ñ—É–∫–Ω—Ü–∏—é?
		–°–∫–æ–ª—å–∫–æ —É–∫–∞–∑–∞–Ω–æ –ø—Ä–∏ –µ–µ —Å–æ–∑–¥–∞–Ω–∏–∏.
		–ú–∏–Ω–∏–º—É–º –æ–¥–∏–Ω.
		–°–∫–æ–ª—å–∫–æ —É–≥–æ–¥–Ω–æ.

	–ø—Ä–æ–≤–µ—Ä–∏—Ç—å

	–ú–∞—Å—Å–∏–≤—ã —ç—Ç–æ –æ–±—ä–µ–∫—Ç—ã?
		–ù–µ —Å–æ–≤—Å–µ–º.
		–ù–µ—Ç.
		–î–∞, —ç—Ç–æ —Å–ø–∏—Å–∫–æ–ø–æ–¥–æ–±–Ω—ã–µ –æ–±—ä–µ–∫—Ç—ã.

	–ø—Ä–æ–≤–µ—Ä–∏—Ç—å
 */

const initialData = [
	{
		id: 1,
		question: "javascript is java?",
		answers: [
			{text: "no", isCorrect: true},
			{text: "yes", isCorrect: false},
			{text: "maybe", isCorrect: false},
		]
	},
	{
		id: 2,
		question: `how many parameters can be sent to\xa0a\xa0function?`,
		answers: [
			{text: "as much as specified at its creation", isCorrect: true},
			{text: "at least one", isCorrect: false},
			{text: "as much as you want", isCorrect: false},
		]
	},
	{
		id: 3,
		question: "arrays are objects?",
		answers: [
			{text: "not exactly", isCorrect: false},
			{text: "not at all", isCorrect: false},
			{text: "yes, they are list-like objects", isCorrect: true},
		]
	}
];

const box = document.querySelector(".box"),
			question = box.querySelector(".question"),
			inputs = box.querySelectorAll(".radio"),
			responseOptions = box.querySelectorAll(".response-option"),
			checkBtn = box.querySelector(".test-btn"),
			testResult = document.querySelector(".test-result"),
			reloadBtn = document.querySelector(".btn-repeat-test"),

			correctAnswers = [],
			userAnswers = [],
			results = {
				0: "you answered all the questions wrong üòî",
				1: "you gave only 1 correct answer ü§î",
				2: "you gave 2 correct answers üòè",
				3: "all your answers are correct üòé",
			};

let checkBtnDisabled = true;

/* building correctAnswers array from initialData */
for (const question of initialData) {
	const answers = question.answers;
	answers.forEach((answer, i) => {
		if (answer.isCorrect == true) {
			correctAnswers.push(i+1);
		};
	});
};

/* entering the first question */
fillData(initialData[0]);

/* check button will be enabled when any radio button is checked */
box.addEventListener("change", () => toggleDisabled(inputs, checkBtn));

checkBtn.addEventListener("click", () => getAnswer(inputs));
reloadBtn.addEventListener("click", () => location.reload());

function fillData(data) {
	question.textContent = data.question;
	question.dataset.question = data.id;
	responseOptions.forEach((option, index) => {option.textContent = data.answers[index].text});
};

function toggleDisabled(inputs, button) {
	if (event.target.classList.contains("radio")) {
		button.setAttribute("disabled", true);

		for (const input of inputs) {
			if (input.checked) {
				button.removeAttribute("disabled");
				break;
			};
		};

		checkBtnDisabled = button.hasAttribute("disabled");
	};
};

function getAnswer(inputs) {
  let userAnswer

  for (let i = 0; i < inputs.length; i++) {
		const isAnswer = inputs[i].checked && checkBtnDisabled == false
    if (isAnswer) userAnswer = inputs[i].value;
  };

  userAnswers.push(Number(userAnswer));
	showNextQuestion(initialData);
};

function showNextQuestion(questionnaire) {
	for (let i = 1; i <= questionnaire.length; i++) {
		const nextQuestion = questionnaire[i],
					isQuestion = i == question.dataset.question,
					isLastQuestion = i == questionnaire.length;

		if (isQuestion && !isLastQuestion) {
			fillData(nextQuestion);
			inputs.forEach(input => input.checked = false);
			checkBtn.setAttribute("disabled", true);
			break;

		} else if (isLastQuestion) {
			getResults();
			break;
		};
	};
};

function getResults() {
  let howMuchCorrectAnswers = 0;
  for (let i = 0; i < userAnswers.length; i++) {
    if (userAnswers[i] == correctAnswers[i])
			howMuchCorrectAnswers += 1;
  };

	box.classList.add("d-none");

  testResult.textContent += results[howMuchCorrectAnswers];
	testResult.closest("DIV").classList.remove("d-none");
};





/** original version

let howMuchCorrectAnswers = 0;
fillData(initialData[0]);
inputs.forEach(input => {input.addEventListener("click", () => toggleDisabled(inputs, checkBtn))});
checkBtn.addEventListener("click", () => getAnswer(inputs));

function fillData(data) {
	question.textContent = data.question;
	question.dataset.question = data.id;

	responseOptions.forEach((option, index) => {option.textContent = data.answers[index].text});
	inputs.forEach((input, index) => {input.value = data.answers[index].isCorrect});
};

function toggleDisabled(inputs, target) {
	target.setAttribute("disabled", true);

	for (const input of inputs) {
		if (input.checked) {
			target.removeAttribute("disabled");
			break;
		};
	};

	checkBtnDisabled = target.hasAttribute("disabled");
};

function getAnswer(inputs) {
  let userAnswer

  for (let i = 0; i < inputs.length; i++) {
    if (inputs[i].checked && checkBtnDisabled == false)
      userAnswer = inputs[i].value;
  };

  userAnswers.push(userAnswer);
	if (userAnswer == "true") howMuchCorrectAnswers += 1;

	showNextQuestion(initialData);
};

function showNextQuestion(questionnaire) {
	for (let i = 1; i <= questionnaire.length; i++) {
		const nextQuestion = questionnaire[i],
					isNextQuestion = i == question.dataset.question,
					islastQuestion = i == questionnaire.length;

		if (isNextQuestion && !islastQuestion) {
			inputs.forEach(input => input.checked = false);
			fillData(nextQuestion);
			toggleDisabled(inputs, checkBtn);
			break;

		} else if (islastQuestion) {
			getResults();
			break;
		};
	};
};

function getResults() {
	box.classList.add("d-none");

  testResult.textContent = resultsObj[howMuchCorrectAnswers];
	testResult.closest("DIV").classList.remove("d-none");
};
*/

/** –ù—É–∂–µ–Ω –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –Ω–∞ box ‚Äî¬†—Å–º–æ—Ç—Ä–∏–º, –Ω–∞ —á—Ç–æ –∫–ª–∏–∫–Ω—É–ª–∏.
 * –ï—Å–ª–∏ –æ–¥–∏–Ω –∏–∑ –∏–Ω–ø—É—Ç–æ–≤ checked ‚Äî —É–±–∏—Ä–∞–µ–º —Å button disabled.
 * –ï—Å–ª–∏ event.target == button (–ø–æ –∫–ª–∞—Å—Å—É –ø—Ä–æ–≤–µ—Ä–∏—Ç—å?) && button == disabled,
 * 	–µ—Å–ª–∏ box.dataset.id < initialData.id 
 * 		1) userAnswers.push (–∞–∫—Ç–∏–≤–Ω—ã–π –∏–Ω–ø—É—Ç dataset.correct)
 * 		2) fillData(initialData[box.dataset.id])
 * 		3) –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É
 * 	–∏–Ω–∞—á–µ –≤—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥ –≤ surveyResult, –ø—Ä–æ—Ö–æ–¥—è –ø–æ –º–∞—Å—Å–∏–≤—É –æ—Ç–≤–µ—Ç–æ–≤ –¥–∞–µ–º –∫–æ–ª-–≤–æ true
 * */